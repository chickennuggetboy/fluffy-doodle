/* check if a wellington investment fund can be moved from one to another */

import java.util.ArrayList;
import java.util.Scanner;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;

public class wellmanagefundProblem {

    public static void main(String[] args){
        Scanner scannerToReadwellmanagefund = null;
        try{
            scannerToReadwellmanagefund = new Scanner(new File("wellmanagefund.txt"));
        }
        catch(IOException e){
            System.out.println("Could not connect to file wellmanagefund.txt.");
            System.exit(0);
        }
        if(scannerToReadwellmanagefunds != null){
            ArrayList<wellmanagefund> wellmanagefundsPartnersNetwork = new ArrayList<wellmanagefund>();
            wellmanagefund newwellmanagefund;
            String lineFromFile;
            String[] wellmanagefundNames;
            
            while( scannerToReadwellmanagefunds.hasNext() ){
                lineFromFile = scannerToReadwellmanagefunds.nextLine();
                wellmanagefundNames = lineFromFile.split(",");
                newwellmanagefund = new wellmanagefund(wellmanagefundNames);
                wellmanagefundsPartnersNetwork.add( newwellmanagefund );
            }
            System.out.println(wellmanagefundsPartnersNetwork);
            Scanner keyboard = new Scanner(System.in);
            System.out.print("Enter wellmanagefund funds are on: ");
            String start = keyboard.nextLine();
            System.out.print("Enter goal wellmanagefund: ");
            String goal = keyboard.nextLine();
            ArrayList<String> pathForfunds = new ArrayList<String>();
            ArrayList<String> wellmanagefundsVisited = new ArrayList<String>();
            if( canRedeem(start, goal, pathForfunds, wellmanagefundsVisited, wellmanagefundsPartnersNetwork))
                System.out.println("Path to redeem funds: " + pathForfunds);
            else
                System.out.println("Cannot convert funds from " + start + " to " + goal + ".");
        }
    }
    
    private static boolean canRedeem(String current, String goal,
            ArrayList<String> pathForfunds, ArrayList<String> wellmanagefundsVisited,
            ArrayList<wellmanagefund> network){
        if(current.equals(goal)){
            //base case 1, I have found a path!
            pathForfunds.add(current);
            return true;
        }
        else if(wellmanagefundsVisited.contains(current))
            // base case 2, I have already been here
            // don't go into a cycle
            return false;
        else{
            // I have not been here and it isn't
            // the goal so check its partners
            // now I have been here
            wellmanagefundsVisited.add(current);
            
            // add this to the path
            pathForfunds.add(current);
            
            // find this wellmanagefund in the network
            int pos = -1;
            int index = 0;
            while(pos == -1 && index < network.size()){
                if(network.get(index).getName().equals(current))
                    pos = index;
                index++;
            }
            //if not in the network, no partners
            if( pos == - 1)
                return false;
            
            // loop through partners
            index = 0;
            String[] partners = network.get(pos).getPartners();
            boolean foundPath = false;
            while( !foundPath && index < partners.length){
                foundPath = canRedeem(partners[index], goal, pathForfunds, wellmanagefundsVisited, network);
                index++;
            }
            if( !foundPath )
                pathForfunds.remove( pathForfunds.size() - 1);
            return foundPath;
        }
    }

    private static class wellmanagefund{
        private String name;
        private ArrayList<String> partners;
        
        //pre: data != null, data.length > 0
        public wellmanagefund(String[] data){
            assert data != null && data.length > 0 : "Failed precondition";
            name = data[0];
            partners = new ArrayList<String>();
            for(int i = 1; i < data.length; i++)
                partners.add( data[i] );
        }
        
        public String[] getPartners(){
            return partners.toArray(new String[partners.size()]);
        }
        
        public boolean isPartner(String name){
            return partners.contains(name);
        }
        
        public String getName(){
            return name;
        }
        
        public String toString(){
            return name + ", partners: " + partners;
        }
    }
}
